Please visit MSMC2 website for detail usage:
https://github.com/stschiff/msmc2
The main MSMC2 program for linux system is in this folder named “msmc2” without any extension

**msmc-tools are also required for the pipeline, it can be download here (also in this folder):
https://github.com/stschiff/msmc-tools
Please put the unzipped folder in the same folder where you put the "msmc.pl" script.

**qsub_subroutine.pl is required to be put in the $HOME/softwares folder

This pipeline is suitable for 2 original samples or 2 synthesized samples in each population. (more is possible, but don’t put more than 8 samples in each population.)
If you want to analyze more samples, you can randomly choose samples and run the pipeline repeatedly. This can be done by the -random option.
Also, this script is suitable for HPC servers (gc3, h81 and Taiwania 1), except h71.
The script contains a series of steps for plotting, please use "nohup" and "2>&1 &" to run the script in background.

**IMPORTANT**
Before running of script:
Please prepare a vcf file with all contigs/chromosomes (with all sites vcf file).

**Other required files:
averaging_lambda_new.R
averaging_lambda_sep_new.R
population_plot_new.R
population_plot_sep_new.R

**R packages required:
data.table
ggplot2
tidyverse
RColorBrewer
gridExtra

You also need to set MSMC environment:
in gc3 and h81 server:
conda activate R-4.1
in other server:
msmc2 cannot be run on the h71 server.
for Taiwania 1 server:
step 1:
Please put the excusable binary MSMC file (msmc2) in the $HOME/softwares folder.
change the property of the file by executing a command line:
chmod +x msmc2

step 2:
modify the environment path:
edit ~/.bash_profile and add a line:
export PATH=$HOME/softwares:$PATH

reload environment:
source ~/.bash_profile

edit a line in msmc_v2.pl:
line 14: my $py3_env = '{conda env with python3/bin}';
where {conda env with python3} is the folder path to your conda env.
eg. my $py3_env = '$HOME/miniconda3/envs/R-4.1/bin';

Usage: 
nohup perl msmc_v5.pl -vcf VCF_FILE -list SYNTHETIC_LIST -mask MASK_FILE [-syn] [-f] [-p] [-ow] [-mu NUM] [-gen INT] [-random INT] [-rn NUMBER] [-s_num INT] [-t INT] [-debug] [-proj PROJECT_NAME] [-sn] [-exc] 2>&1 &
#IMPORTANT# you must use “synthetic_f1_msmc_single_v4.pl” for v4 version instead of “synthetic_f1_msmc_single.pl”
Also, you need to set the “bedtools” path at script line 19 (default: using conda environment “bedtools” in h81), sort_bed.pl is not needed anymore

-vcf: point to your vcf file path.
-list: point to your list file path, which contains samples you want to analyze. Should be a 4-column table (for synthesized F1) or a 2-column table (for original sample or samples with -random option), separated by tab. (End with file extension ".list" or ".txt")
       if you want to use -random option for synthesized F1, please use a 2-column table
       synthesized F1: (see example "ALL_syn.list")
       Format: Sample1	Sample2	synthesized_name	population_name
       original sample or analysis with -random option: (see example "ALL.list" & "MSMC_100_random_sets.txt")
       Format: Sample	population_name
       ***IMPORTANT*** The 4-column table only uses the existence of -syn option without the -random option.
-mask/-mk: mask file that you want to exclude from the analysis. (BED format, GFF format is allowed for v4)
-syn: for self-pollinated species with a high homozygote background, synthetic_f1_msmc_single.pl file is required.
-sf: if you don’t want to filter the vcf with "filter_vcf.2.4.pl", you can use argument, otherwise the raw vcf is assumed. (v2 and v3 used)
-f: if you want to filter the raw vcf with "filter_vcf.2.4.pl", you can use argument, otherwise the filtered vcf is assumed. (v4 only)
-p: population separation analysis, you can set "timeSegmentPattern" with this argument (please see functions in MSMC2)
-ow: overwrite the previous files generated by MSMC. Otherwise this script will check for file availability in each step.
-mu: set mutation rate per generation. default: 1e-8
-gen: set per generation time (year). default: 1
-random: do this pipeline in n times (n is the repeat number). randomly choose samples in every population to run msmc2 each time. sample number of each populations is defined by option "-syn_num"
-rn: if you want to run the specific repeat No., you can use the option to run the specific run. “-” represents serial runs from start No. to end No., and “,” separates different runs. (v3, v4 only)
eg. If you want to run 3,4,5,6,7,14,18,19,20,23 runs. You can type: 3-7,14,18-20,23
-s_num: how many samples for each population to run msmc2. default is 2.
-t: thread to use
-sn: serial number defined by user, or the script will randomly generate one.
-proj: project name used for Taiwania 1 server.
-debug: debug mode.
-exc: send job(s) to run.

sort_bed.pl is useful to filter the overlapping regions in *.bed file, especially if you copy the info from *.gff file. This is to make an acceptable mask file for MSMC.

Usage:
perl sort_bed.pl BED_FILE

It will generate an *.sorted.bed file in the same folder where you put your *.bed file.

